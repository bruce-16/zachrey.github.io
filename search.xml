<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[2016年时光轴]]></title>
      <url>%2F2017%2F01%2F27%2F2016%E5%B9%B4%E6%97%B6%E5%85%89%E8%BD%B4%2F</url>
      <content type="text"><![CDATA[2016年时光轴 ２０１６年，在工作的充实下，时间好像过的更快。5月中旬，接触了APPCAN这种混合开发平台，当时几天培训和讲解，也是弄得一头雾水。没办法，当时听不懂，所以就恶补了下前端的基础知识，最后就能慢慢的动手了。当时一起考初级、中级认证是最激动的时候。不过好在有老师和几个伙伴的陪伴下，我们一起顺利的拿下了认证，也得到了公司初次合作的认可。 5月 第一个练手项目，第一次接触项目需求分析会议，听得非常认真，在为期20天左右的开发时间中，每天都会碰到问题并去解决问题，那时可能也把APPCAN的技术经理麻烦了一阵子吧。最终还是顺利完成，认识到了APPCAN这个平台的方便，也认识到了自己知识的不足。以微茫的知识，就能开发出一个Android和IOS都能跑的APP，此时，自己感到了一丝成就感，之后将APP上传到IOS的APP商店费了不少精力，查询的资料何其多，解决问题就应该坚持不懈，不断尝试。 6月 中间休息了一段时间，闲的时候，就加强练习下HTML+CSS+JS的知识体系，在此“慕课网”给我的帮助还是真不少，当然，这里面只能叫我入门的知识。更多的还是在网上的论坛、博客上看别人的解答。到此，JS的灵活激发了我一丝好奇心，希望把它能更好的掌握和设计。 学习了一段时间的JS，迎来了第二个项目。最开始，拿到了一种红外扫码的定制设备，相对来说比第一个项目的难度要大，前后台数据交互很多，好的是以前有一点后端服务的概念，知道数据交互的流程，能勉强按要求去完成，学会和后端人员沟通，并定制接口数据，是我在这个项目得到的最大的收获，虽然“大冶有色”也需要沟通，但是规模会比这个要小。 7,8,9月 第二个项目“长高条码管理系统”，时间较长，2个月左右，开发用了一个月，之后剩下的就是维护了。维护的期间就在学校和公司穿梭，因为没有什么很大的问题，所以那一段时间是很放松的。这个时候开始了培训第二批队员的计划，因此，走上了讲台。平时常在“慕课网”上面听各种老师授课，并且大二上学期做过半学期的C语言助教，单独讲授过几次课，算是有过点经验，但是第一次开始的时候，还是适应了一段时间。觉得还是要认真备课，因为临场敲击代码，真的很难做到正确和准确。 10,11,12月 10月开始，进行类似于“长高条码管理系统”的第三个项目，目前就进行到这里，一直都在增加和更改。着实忙了很大一段时间。最初说的是10月25交成功，所以不停的赶进度，最后这个时间无限的往后延迟，剩下的就是无尽的维护和更改。因为类似于之前的“长高条码管理系统”，在维护中产生了很大的厌倦情绪，在临近期末考试的时期尤为明显，伙伴们都产生了这种情绪，这也许就是初到“职场”的浮躁。时间的磨练，最后将这种情绪很好的沉淀下来了，现在公司闲暇的时候，看看技术文摘，大有精神的时候就学android或者NodeJS，在此期间还是用Python写了一个根据时间删除指定文件内容的小工具代码，最后使用，感觉没有想象中的好用；使用NodeJs和github等一些平台搭建了一个属于自己的博客，也算是年终很好的安慰了。 不足和需改进方面： 要充分利用在公司的闲余时间，学学英语也是好的。 项目初始设计的时候加强大局观，以便于维护、修改、扩展为前提，不能以前期方便为主。 文档记录具体、正规化。 处理很多事情时，必须划分重要等级，依次处理。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[javascript正则表达式]]></title>
      <url>%2F2017%2F01%2F18%2Fjavascript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[javascript &amp; 正则表达式 正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。正则表达式并不是javascript所特有的，很多语言都支持正则，但是每种语言对正则表达式的支持或多或少会存在差别。 正则表达式在js中的存在形式在js中，我们可以使用RegExp和字面量来创建正则表达式的对象。RegExp对象：1var re = new RegExp('abc');字面量：1var re = /abc/;正则表达式有三种模式：（全局）global， （忽略大小写）ignoreCase， （多行搜索）multiLines开启的方式为：1var re = new RegExp('abc','igm');或者1var re = /abc/igm; i -&gt; 执行对大小写不敏感的匹配。 g -&gt; 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。 m -&gt; 执行多行匹配。 正则表达式组成形式 原义字符 ： 字符本身的意思 ，例如 a就是字母a 元字符 ：在正则表达式中有特殊含义的非字母字符，例如：* + ^ $ . | \ ( ) { } [ ] /a/ /a*/ /a+/ … 字符类一般情况下正则表达式里面的一个字符对应字符串中的一个字符。 /abc/ 对应字符串”abc”，不对应”abcd”和”ab”等。 使用”[ ]”元字符来构建一个类（类是一个泛指符合某些特征性对象，而不是特殊的指一个字符）。 /[abc]/ 指的可以匹配一个字符，这个字符必须是a,b,c三个中的其中一个。/[^abc]/ 可以匹配一个字符，这个字符必须不是a,b,c三个中的其中任何一个。 1234567str = 'a1b2c3d4';result = str.replace(/[abc]/g, 'X'); //匹配a,b,c三个中任何一个。 a or b or cconsole.log(result); //X1X2X3d4result = str.replace(/[^abc]/g, 'X'); //匹配不为a,b,c三个中任何一种。 !a and !b and !cconsole.log(result); //aXbXcXXX 范围类 [a-z] 可以匹配一个字符，改字符必须为a,b,c,d…z 中的一个[a-zA-Z0-9] 范围可以连写 预定义类 预定义类 等价 含义 . [^\r\n] 除了回车和换行符之外的字符 \d [0-9] 数字字符 \D [^0-9] 非数字字符 \s [\t\n\x0B\f\r] 空白符 \S [^\t\n\x0B\f\r] 非空白字符 \w [a-zA-Z0-9] 单词字符（字母，数字，下划线） \W [^a-zA-Z0-9] 非单词字符 1234str = 'ab1/';result = str.replace(/ab\d./, 'X'); // ab + 数字 + 除了\n的任意字符console.log(result); // X 边界 预定义类 含义 例子 ^ 以XXXX开始 ^a $ 以XXXX结束 a$ \b 单词边界 \ba\b \B 非单词边界 \Ba\B 123456789101112131415161718192021str = 'This is a dog.';result = str.replace(/is/g, '0'); //只要是is，就会被替换console.log(result); //Th0 0 a dog.result = str.replace(/\bis\b/g, '0'); //只有is为一个单独的单词，才会被替换console.log(result); //This 0 a dog.result = str.replace(/\Bis\b/g, '0'); //只有is前面不为单词开始，后面是单词结束。才会被替换console.log(result); //Th0 is a dog.str = '@123@456@789@';result = str.replace(/@./g, '0'); //替换“@+除了\n的任意字符”为“0”console.log(result); //023056089@result = str.replace(/^@./g, '0'); //替换“@+除了\n的任意字符”并且是字符串开头为“0”console.log(result); //023@456@789@result = str.replace(/.@$/g, '0'); //替换“除了\n的任意字符+@”并且是字符串结尾为“0”console.log(result); //@123@456@780 量词 预定义类 含义 ? 出现0次或者1次 + 出现1次或多次 * 出现0次或多次 {n} 出现n次 {n,m} 出现n次到m次 {n,} 至少出现n次 {0,m} js不支持{,m},这里表示出现0次到m次 1234str = '123456789';result = str.replace(/\d*/, '0'); //将所有的数字都替换成0console.log(result); //0 贪婪模式和非贪婪模式在js中，正则表达式默认的就是贪婪模式，使用非贪婪模式就需要在量词的后面加上一个“?”。 /\d*?/ /\d{1,5}?/ /\d+?/ /\d??/ … 12345678910str = '123456789';result = str.replace(/\d*/, '0');console.log(result); //0result = str.replace(/\d&#123;3,6&#125;/, '0'); //贪婪模式，默认就是console.log(result); // 0789result = str.replace(/\d&#123;3,6&#125;?/, '0'); //非贪婪模式console.log(result); // 0456789 贪婪模式会尽可能的去匹配所有字符，非贪婪会尽可能少的来匹配。如上代码。 分组和或运算使用”( )”可以达到分组的功能。如下，使量词作用与分组。 (zachrey){3} 表明 zachrey应该出现三次zachrey(3) 表明 字符串最后的“y”应该出现三次 使用“|”可以达到或运算的效果 zachrey | zhang =&gt; 1.zachreyhang 2.zachrezhang(zachrey) | (zhang) =&gt; 1.zachrey 2.zhang 反向引用现有一个要求： 将时间 years-months-days 格式的时间装换为 months/days/years 格式，例如”2017-01-22” 装换为 “01/22/2017”,时间内容可能变化，但是格式固定。那么有这样的要求的时候，就需要使用反向引用来解决。在js正则表达式中有这样的字符样式 $1, $2, $3, $4…它们分别表示的是分组1、分组2、分组3、分组4…里面的内容。前提情况下，正则表达式里面有分组，没有的话，它们就会变为原义字符。1234str = "2017-01-22";result = str.replace(/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/, "$2/$3/$1"); // $2 第二个分组console.log(result); //01/22/2017 忽略分组如果不希望分组被$捕获，只需要在分组里面加上“?:”。 /(?:zachrey)(zhang)/ $1 =&gt;&gt;&gt; zhang 前瞻正则表达式从文本头部向尾部开始解析，那么现在的尾部被称为“前”，开始的头部称为“后”。前瞻就是在正则表达式匹配到规则的时候向前检查是否符合断言。后顾和前瞻的方向相反，js并不支持后顾。符合和不符合特定的断言称为肯定/正向匹配和否定/负向匹配。 正向前瞻： exp(?=assert)负向前瞻: exp(?!assert) 1234567str = 'a1b*c4';result = str.replace(/[a-z](?=\d)/g, 'X'); //替换字母并且该字母后面跟的是数字console.log(result); //X1b*X4result = str.replace(/[a-z](?!\d)/g, 'X'); //替换字母并且该字母后面跟的不是数字console.log(result); //a1X*c4 正则表达式对象的属性 global : 是否全文搜索，默认false ignore case : 是否大小写敏感，默认false multiline : 多行搜索模式，默认false lastindex : 是当前表达式匹配内容的最后一个字符的下一个字符的位置下标 source : 正则表达式的文本字符串 这些属性都是只读属性 常用方法 Regexp.prototype.test() Regexp.prototype.exec() String.prototype.search() String.prototype.match() String.prototype.replace() String.prototype.split()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用Hexo+github创建个人博客]]></title>
      <url>%2F2017%2F01%2F12%2F%E4%BD%BF%E7%94%A8Hexo-github%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[准备工作 nodejs的安装 github账号 域名 最先，还是以官方的文档为最权威的说明：官方文档 首先，我们需要先保证电脑上安装了nodejs和git，过程中是需要用到git bash。 git nodejs 开始 现在是默认电脑已经安装好了以两个东西。 先自己在电脑中新建一个文件夹，至于哪个盘没有限制，高兴就好。不过还是建议能将文件归档分类，这是一个好习惯，以后找起来方便。 进入文件夹，在空白的位置右击鼠标，选择Git Bash Here，就会出现git的命令行工具，是一个小黑框。如果git没有安装好，那么右键菜单上面是没有这个选项的。那么现在我们在这个命令行工具上输入下面的命令：1$ npm install -g hexo-cli nodejs安装完成后，就会自带的安装npm，这个npm是nodejs包管理工具，这里就是用npm安装hexo客户端， -g意思是全局安装，以后随便哪个文件下都可以使用hexo。 接下来就是使用hexo来生产博客需要的文件。1$ hexo init 顺序执行之后，刚才的文件夹（我这里是Blog）里面多了很多文件。不要急，接下来继续执行一下命令12$ hexo g$ hexo s 出现的这样画面： 浏览器中出现的画面： 这样，本地的博客是能正常运行了。 Git的设置创建一个Repository建立与你用户关联的仓库，仓库的名字必须要为“your_name.github.io”,这是一个固定写法，这个写法只是在这里是特殊的，正常使用github仓库名字没必要这样。 接下来就需要修改hexo的配置文件，来将本地与github仓库远程关联上来。下图是目录结构，配置文件就在博客根目录（我这里是Blog文件夹）。名字为： _config.yml 在文件中搜索：deploy，将它设置为：(注意冒号后面有一个空格)1234deploy: type: git repo: https://github.com/your_name/your_name.github.io branch: master 然后安装部署工具：1$ npm install hexo-deployer-git --save 安装成功后，执行:1$ hexo deploy 或者：1$ hexo d 这时候hexo g命令生成在public文件夹下面的静态文件就会部署到github上你刚创建的仓库里面。 在浏览器上输入： “your_name.github.io”就会出现最开始在本地开启的博客页面。如果出现DNS未找到，或者网页错误，那么先等待片刻，过3~5分钟再试试。如果还出现错误，请仔细检查上面每一步操作，检查下nodejs，git的安装和配置，特别是git的设置。关于git的设置请参考:Git安装与配置 - 铁锚的CSDN博客 - 博客频道 - CSDN.NET 至此，如果我们每次发布新日志，一般的步骤为：12345hexo cleanhexo generatehexo deploy 域名解析下面以万网购买的域名为例。我是通过阿里云上的万网购买的域名，进入到阿里云的网页管理界面。先进入到万网的管理页面，找到域名解析栏目： 这里添加两个解析：（记录类型）CNAME， （主机记录）www和@，（记录值）your_name.github.io 很重要的一步： 在博客目录下的source文件夹内创建文件“CNAME”，名字一定不要写错，并且不能有后缀名，文件里面的内容为，你的域名。注意，不要书写www。现在执行：12$ hexo g $ hexo deploy 将新文件重新生成，然后再部署到github上。到这里，就可以尝试使用你的域名去访问新建立的博客了。域名解析时间一般在10分钟以内，如果访问出现404，就先等待5分钟左右，但一般都会立即生效。 如果还是404就仔细检查CNAME的内容，并跑到你的github仓库中看看有没有CNAME文件，并且里面的内容是否正确。因为hexo deploy如果没有正常执行的话，CNAME文件是部署不到github仓库上去的。这里就再三声明，如果github上没有，那就再检查你的git配置。 最后给大家推荐个主题Next Elegant Theme for Hexo 文档 这里有详细的使用说明。 具体博客的操作，更改请参考Hexo官网文档]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[第一篇日志]]></title>
      <url>%2F2017%2F01%2F11%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E6%97%A5%E5%BF%97%2F</url>
      <content type="text"><![CDATA[博客 一直想拥有一个属于自己的独立博客，最近在学习Python，又看了些微信公众号上推送的2017年程序员的生存之道，觉得是时候必须建立个博客了。所以在网上查找了写关于个人博客的创建方法，最后决定使用了Hexo这个博客框架。因为它正好是使用nodejs构成的，使用npm安装即可，之后再看官方文档和喜欢的主题（Next）的文档等，最终折腾了10个小时左右。功能并不多但是基本的都有了，以后会慢慢完善。最重要的是以这个博客来监督自己去完成一些事情。 过去的2016 这一年，5月之前一直在学习C++和Linux，当时这两个东西我是饶有兴趣。之后一直在做Hybrid移动设备的开发，至今很久没有去继续学习这两种东西，不过平时还是经常接触Linux。 现在的2017 熟悉掌握ECMAScript6 使用Python制作爬虫工具 Python 的 Web开发 Appcan4.0 nodejs]]></content>
    </entry>

    
  
  
</search>
